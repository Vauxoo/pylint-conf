[MASTER]
profile=no
ignore=CVS,.git,scenarios,__openerp__.py,LICENSE,*.md
persistent=yes
cache-size=500

[MESSAGES CONTROL]
enable=E1601
disable=E1002,E1101,E1120,E1121,E1123,W0212,W0221,W0223,W0232,W0511,W0613,C0111,C0301,C0326,C0330,R0201,R0902,R0903,R0912,R0915,I0011,W0622,W0222

#***Enabled and how to fix***
#E0611 - no-name-in-module. 
#        This is why you are trying import a directory and a file with same name.
#        e.g. https://docs.google.com/a/vauxoo.com/file/d/0B4taKTc4rOjsX0lSdUx2RjNlX3c/edit?usp=drivesdk
#            Path structure:
#                package/
#                  mypackage/__init__.py
#                  mypackage.py
#                  __init__.py << from . import mypackage
#        You can fix it change name of your package file or your package folder
#E1103 - maybe-no-member 
#     Instance of 'bool' has no 'name' member 
#     Fix changing "var=False" by "var=None" in assignment.
#E1601 - print sentence detect
#     You can remove print sentence or if really needs it replace by:
#     print "My Old Print"
#     sys.stdout.write("My New Print\n")
#F0401 - http://pylint-messages.wikidot.com/messages:f0401
#   Fix adding odoo to path before run pylint
#   PYTHONPATH=${PYTHONPATH}:tu_odoo_path pylint command...
#   other case of this problem should be:
#   add from openerp.addons.MYMODULE import ANYONE
#R0801 - http://stackoverflow.com/questions/12209430/pylint-raising-r0801-for-coding-declaration-lines
#R0915 - too many statements - Can be fixed split method in more mini-function. More info here: http://doc.openerp.co.id/contribute/15_guidelines/coding_guidelines_framework.html#keep-your-methods-short-simple-when-possible
#W0102 - dangerous-default-value. 
   #Not use
   #def fc(param0, param1=[], param2={}):
   #You can use:
   #def fc(param0, param1=None, param2=None):
   #    if param1 is None:
   #        param1 = []
   #    if params2 is None:
   #        param2 = {}
   #More info here: https://doc.odoo.com/contribute/15_guidelines/coding_guidelines_framework/#the-infamous-context
#W0141 - Bad-builtin. Used builtin function 'file', can be fixed using the sentence "with open(fname) as fjob: fobj.read()", the "fobj.close()" sentence is not needed.
         # This problem can be fixed "translating" your code using builtin function
         # to list comprehension equivalent code, here's an example:
         # > map(str, my_sequence) gives this error in pylint
         # > [str(item) for item in my_sequence] is the equivalent code and doesn't report an error with pylint
#W0142 - star-args. method(**my_dict) replace with method(my_dict). If use string.format check this link: http://stackoverflow.com/a/5952429/3753497
#W0403 - http://programmers.stackexchange.com/questions/159503/whats-wrong-with-relative-imports-in-python
       # You can use auto-script from https://github.com/Vauxoo/pylint-conf/blob/master/fix_unused_imports/replace_import.py to remove all relative import
       # Resumen: from . import mylocalfolder
#W0611 - Unused import. Fixing remove this unused import. Or run "autoflake --remove-all-unused-imports -ri . && bzr revert ./*/__init__.py ./*/*/__init__.py ./*/*/*/__init__.py" TODO: exclude __init__.py
#W0612 - unused-variable. You can fix it deleting variable.  Or run "autoflake --remove-unused-variables -ri . && bzr revert ./*/__init__.py ./*/*/__init__.py ./*/*/*/__init__.py" TODO: exclude __init__.py
#W0621 - redefining name %r from outer scope (line %s) Used when a variableâ€™s name hide a name defined in the outer scope.
         #  you use a variable with name of some class. don't use same names for variables and classes. Example:
         # class account_invoice_tax(self):
         #     account_invoice_tax = "text"  #  Name of variable same that class
         # Fix:
         # class account_invoice_tax(self):
         #     account_invoice_tax_var = "text"
#W0703 - Catching too general exception. Change "except" by "except ImportError" or "except ClassError". if you need any exception then use "except BaseException, e" or "except BaseException"
#W1401 - Anomalous-backslash-in-string. You can fix using a prefix 'r'. Example before and after, from re.match("[^@]+\.[^@]+", string) to re.match(r"[^@]+\.[^@]+", string)
#C0303 - Trailing whitespace http://pylint-messages.wikidot.com/messages:c0303. Remove final spaces before of newline. Many editor has a auto-remove this spaces or autopep8 remove it too.
#C0330 - No such message - This happens mostly when installed with apt-get install pylint where the repositories are not updated, so it must be uninstalled:
         # sudo apt-get remove --purge pylint
         # sudo apt-get remove --purge python-astroid
         # sudo apt-get remove --purge python-logilab-common
         # Then you must install with pip where the repositories are updated more:
         # sudo pip install --upgrade --force-reinstall pylint
         # This last step must be executed twice:
         # sudo pip install --upgrade --force-reinstall pylint
#C1001 (old-style-class)] Old-style class defined
#   You can just use the new-style class instead. More info here: - http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python
#   Fix changing "class amount_to_text:" by "class amount_to_text(object):" .

#***Disabled and why***
#E1002 - make a error with this sentence: def __init__(self, cr, uid, name, context=None)
#E1101 - make a error with this sentence: product_obj = self.pool['product.product']
#E1120 - mno-value-for-parameter. - Methods from new api make this false negative.
#E1121 - too-many-function-args. This is because you are changing args of an method.
#        You can fix it using exactly same args from original method into inherit method.
#        Into Odoo-8.0 this is a little hardly with decorators. This forces you to use the new api, but your code work fine with old api yet.
#        TODO: Enabling when we have time to migrate all our modules.
#E1123 - unexpected-keyword-arg. Similar to E1121.
#W0123 - eval-used, this error in resolved with this code "ast.literal_eval", view example in this link https://bitbucket.org/logilab/pylint/pull-request/95/add-new-warning-eval-used/diff
#W0212 - http://pylint-messages.wikidot.com/messages:w0212 odoo use many underscore method.
#W0221 - Arguments number differs from overridden method - Odoo 8.0 use decorator and rewrite  original function and make this false error.
#W0223 - http://pylint-messages.wikidot.com/messages:w0223 odoo use many abstract method.
#W0232 - http://pylint-messages.wikidot.com/messages:w0232 odoo use many class without __init__.
#W0511 - Used when a warning note as FIXME or TODO is detected. This is not a error.
#W0613 - Unused argument. odoo use many unused argument. Example cr, uid, name o super method.
#C0111 - Missing docstring http://pylint-messages.wikidot.com/messages:c0111. Too much work. WIP
#C0301 - Line too long http://pylint-messages.wikidot.com/messages:c0301. Too much work. TODO.
#C0326 - No space allowed before comma... (pep8). Too much work. TODO.
#C0330 - bad-continuation (pep8). Too much work. TODO.
#R0201 - Method could be a function http://pylint-messages.wikidot.com/messages:r0201. odoo use many method without decorator.
#R0902 - too many instance attributes. Odoo use many initial attributes into __init__ of class myclass: myAttr1
#R0903 - too few public methods http://stackoverflow.com/questions/14027417/what-does-pylints-too-few-public-methods-message-mean. odoo use many method with 
#R0912 - Too many branches. Odoo use many method with many branches.
#I0011 - Add a fail of ignore added, but this isn't a error. NOTE: There is a bug with this disable: https://bitbucket.org/logilab/pylint/issue/340/pylint-disable-c0302-does-not-work
#W0622 - Redefining built-in 'id', can be fixed using a variable name unreserved system like "ids".x  This apply over a variable/arguments/methods names that use a predefined name like 'id', 'list', 'dict', 'type'. However, some overwrited methods have arguments defined as 'argument=default' and in that case the argument name cannot be change.
#W0222 - Signature differs from overridden method. In an effort for solving W0622 error make us change some method arguments names, this cause an unpleasant effect because is required that a overwrite method arguments match exactly as the original method.
[REPORTS]
msg-template={module}:{line}: [{msg_id}({symbol}), {obj}] {msg}
output-format=colorized
files-output=no
reports=no
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
comment=no

[VARIABLES]
init-import=no
dummy-variables-rgx=_|dummy|e|checks|fast_suite
additional-builtins=

[TYPECHECK]
ignore-mixin-members=yes
ignored-classes=SQLObject
zope=no
generated-members=REQUEST,acl_users,aq_parent

[BASIC]
required-attributes=
no-docstring-rgx=__.*__
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__)|(_logger))$
#class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=([a-z_][a-z0-9_]{2,45})|([A-Z_][a-zA-Z0-9]{2,45})$
function-rgx=[a-z_][a-z0-9_]{2,45}$
method-rgx=[a-z_][a-z0-9_]{2,45}$
attr-rgx=[a-z_][a-z0-9_]{2,45}$
argument-rgx=([a-z_][a-z0-9_]{2,45}$)
variable-rgx=[a-z_][a-z0-9_]{1,45}$
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
good-names=_,cr,uid,id,ids,_logger,o,e,i,k,v,checks,fast_suite
bad-names=

[IMPORTS]
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec,pdb,pudb

[DESIGN]
max-args=200
max-locals=200
max-returns=6
max-branchs=25
max-statements=200
max-parents=7
max-attributes=7
min-public-methods=2
max-public-methods=200

[CLASSES]
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by
defining-attr-methods=__init__,__new__,setUp

[FORMAT]
max-line-length=80
max-module-lines=10000
indent-string='    '

[SIMILARITIES]
min-similarity-lines=14
ignore-comments=yes
ignore-docstrings=yes

[MISCELLANEOUS]
notes=FIXME,TODO
