[MASTER]
profile=no
ignore=CVS,.git,scenarios,__openerp__.py,LICENSE,*.md
persistent=yes
cache-size=500

[MESSAGES CONTROL]
disable=E1002,E1101,E1120,W0212,W0223,W0232,W0511,W0613,C0111,C0301,C0326,C0330,R0201,R0902,R0903,R0912,R0915,I0011

#***Enabled and how to fix***
#E1103 - maybe-no-member 
#     Instance of 'bool' has no 'name' member 
#     Fix changing "var=False" by "var=None" in assignment.
#F0401 - http://pylint-messages.wikidot.com/messages:f0401
#   Fix adding odoo to path before run pylint
#   PYTHONPATH=${PYTHONPATH}:tu_odoo_path pylint command...
#R0801 - http://stackoverflow.com/questions/12209430/pylint-raising-r0801-for-coding-declaration-lines
#W0102 - dangerous-default-value. 
   #Not use
   #def fc(param0, param1=[], param2={}):
   #You can use:
   #def fc(param0, param1=None, param2=None):
   #    if param1 is None:
   #        param1 = []
   #    if params2 is None:
   #        param2 = {}
   #More info here: https://doc.odoo.com/contribute/15_guidelines/coding_guidelines_framework/#the-infamous-context
#W0403 - http://programmers.stackexchange.com/questions/159503/whats-wrong-with-relative-imports-in-python
       # You can use auto-script from https://github.com/Vauxoo/pylint-conf/blob/master/fix_unused_imports/replace_import.py to remove all relative import
       # Resumen: from . import mylocalfolder
#W0611 - Unused import. Fixing remove this unused import. Or run "autoflake --remove-all-unused-imports -ri . && bzr revert ./*/__init__.py ./*/*/__init__.py ./*/*/*/__init__.py" TODO: exclude __init__.py
#W0612 - unused-variable. You can fix it deleting variable.  Or run "autoflake --remove-unused-variables -ri . && bzr revert ./*/__init__.py ./*/*/__init__.py ./*/*/*/__init__.py" TODO: exclude __init__.py
#W0703 - Catching too general exception. Change "except" by "except ImportError" or "except ClassError". if you need any exception then use "except Exception, e"
#W0141,W0110 - Bad-builtin. Used builtin function 'file', can be fixed using the sentence "with open(fname) as fjob: fobj.read()", the "fobj.close()" sentence is not needed.
# This problem can be fixed "translating" your code using builtin function
# to list comprehension equivalent code, here's an example:
# > map(str, my_sequence) gives this error in pylint
# > [str(item) for item in my_sequence] is the equivalent code and doesn't report an error with pylint
#W0142 - star-args. method(**my_dict) replace with method(my_dict). If use string.format check this link: http://stackoverflow.com/a/5952429/3753497
#W0622 - Redefining built-in 'id', can be fixed using a variable name unreserved system like "ids".
#W1401 - Anomalous-backslash-in-string. You can fix using a prefix 'r'. Example before and after, from re.match("[^@]+\.[^@]+", string) to re.match(r"[^@]+\.[^@]+", string)
#C0303 - Trailing whitespace http://pylint-messages.wikidot.com/messages:c0303. Remove final spaces before of newline. Many editor has a auto-remove this spaces or autopep8 remove it too.
#R0915 - too many statements - Can be fixed split method in more mini-function. More info here: http://doc.openerp.co.id/contribute/15_guidelines/coding_guidelines_framework.html#keep-your-methods-short-simple-when-possible
#C0330 - No such message - This happens mostly when installed with apt-get install pylint where the repositories are not updated, so it must be uninstalled:
# sudo apt-get remove --purge pylint
# sudo apt-get remove --purge python-astroid
# sudo apt-get remove --purge python-logilab-common
# Then you must install with pip where the repositories are updated more:
# sudo pip install --upgrade --force-reinstall pylint
# This last step must be executed twice:
# sudo pip install --upgrade --force-reinstall pylint
#C1001 (old-style-class)] Old-style class defined
#   You can just use the new-style class instead. More info here: - http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python
#   Fix changing "class amount_to_text:" by "class amount_to_text(object):" .
#W0221 - Arguments number differs from overridden method - must be disabled locally using the sentence "# pylint: disable=W0221" at the end of the line of code.
#   this is supported by the following bug report: https://bitbucket.org/logilab/pylint/issue/340/pylint-disable-c0302-does-not-work

#***Disabled and why***
#E1002 - make a error with this sentence: def __init__(self, cr, uid, name, context=None)
#E1101 - make a error with this sentence: product_obj = self.pool['product.product']
#E1120 - mno-value-for-parameter. - Methods from new api make this false negative.
#W0212 - http://pylint-messages.wikidot.com/messages:w0212 odoo use many underscore method.
#W0223 - http://pylint-messages.wikidot.com/messages:w0223 odoo use many abstract method.
#W0232 - http://pylint-messages.wikidot.com/messages:w0232 odoo use many class without __init__.
#W0511 - Used when a warning note as FIXME or TODO is detected. This is not a error.
#W0613 - Unused argument. odoo use many unused argument. Example cr, uid, name o super method.
#C0111 - Missing docstring http://pylint-messages.wikidot.com/messages:c0111. Too much work. WIP
#C0301 - Line too long http://pylint-messages.wikidot.com/messages:c0301. Too much work. TODO.
#C0326 - No space allowed before comma... (pep8). Too much work. TODO.
#C0330 - bad-continuation (pep8). Too much work. TODO.
#R0201 - Method could be a function http://pylint-messages.wikidot.com/messages:r0201. odoo use many method without decorator.
#R0903 - too few public methods http://stackoverflow.com/questions/14027417/what-does-pylints-too-few-public-methods-message-mean. odoo use many method with 
#R0912 - Too many branches. Odoo use many method with many branches.
#I0011 - Locally disabling arguments-differ (W0221) for "def default_get(self, cr, uid, fields_list, context=None)" method definition.
#R0902 - too many instance attributes. Odoo use many initial attributes into __init__ of class myclass: myAttr1

[REPORTS]
msg-template={module}:{line}: [{msg_id}({symbol}), {obj}] {msg}
output-format=colorized
files-output=no
reports=no
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
comment=no

[VARIABLES]
init-import=no
dummy-variables-rgx=_|dummy|e|checks|fast_suite
additional-builtins=

[TYPECHECK]
ignore-mixin-members=yes
ignored-classes=SQLObject
zope=no
generated-members=REQUEST,acl_users,aq_parent

[BASIC]
required-attributes=
no-docstring-rgx=__.*__
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__)|(_logger))$
#class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=([a-z_][a-z0-9_]{2,45})|([A-Z_][a-zA-Z0-9]{2,45})$
function-rgx=[a-z_][a-z0-9_]{2,45}$
method-rgx=[a-z_][a-z0-9_]{2,45}$
attr-rgx=[a-z_][a-z0-9_]{2,45}$
argument-rgx=([a-z_][a-z0-9_]{2,45}$)
variable-rgx=[a-z_][a-z0-9_]{1,45}$
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
good-names=_,cr,uid,id,ids,_logger,o,e,i,k,v,checks,fast_suite
bad-names=

[IMPORTS]
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec,pdb,pudb

[DESIGN]
max-args=200
max-locals=200
max-returns=6
max-branchs=25
max-statements=200
max-parents=7
max-attributes=7
min-public-methods=2
max-public-methods=200

[CLASSES]
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by
defining-attr-methods=__init__,__new__,setUp

[FORMAT]
max-line-length=80
max-module-lines=10000
indent-string='    '

[SIMILARITIES]
min-similarity-lines=14
ignore-comments=yes
ignore-docstrings=yes

[MISCELLANEOUS]
notes=FIXME,TODO
